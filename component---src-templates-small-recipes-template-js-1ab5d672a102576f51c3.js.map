{"version":3,"sources":["webpack:///./src/templates/smallRecipesTemplate.js"],"names":["recipeForm","fields","label","name","description","component","required","dateFormat","timeFormat","options","remarkForm","markdownRemark","data","frontmatter","html","headerImage","image","undefined","title","className","style","float","source","target","href","rel","serves","relatedRecipes","map","r","key","slug","to","reduce","prev","curr","tags","split","tag","Recipe","text","ingredients","recipes","dangerouslySetInnerHTML","__html"],"mappings":"6OAsEO,IAAMA,EAAa,CACxBC,OAAQ,CACN,CACEC,MAAO,OACPC,KAAM,oBACNC,YACE,yFACFC,UAAW,OACXC,UAAU,GAEZ,CACEJ,MAAO,OACPC,KAAM,sBACNE,UAAW,OACXE,WAAY,aACZC,YAAY,EACZJ,YAAa,gDAEf,CACED,KAAM,mBACNE,UAAW,SACXH,MAAO,WACPE,YAAa,yBACbK,QAAS,CAAC,KAAM,KAAM,OAExB,CACEP,MAAO,SACPC,KAAM,qBACNE,UAAW,QAEb,CACEH,MAAO,kBACPC,KAAM,sBACNC,YAAa,uDACbC,UAAW,QAEb,CACEH,MAAO,SACPC,KAAM,qBACNE,UAAW,OACXD,YAAa,qCAEf,CACEF,MAAO,OACPC,KAAM,mBACNE,UAAW,OACXD,YAAa,gCAEf,CACEF,MAAO,cACPC,KAAM,6BACNE,UAAW,YAEb,CACEH,MAAO,OACPC,KAAM,kBACNE,UAAW,WACXC,UAAU,KAKDI,gCA7Hf,YAA6B,IACnBC,EADkB,EAARC,KACVD,eACAE,EAA8BF,EAA9BE,YAAaC,EAAiBH,EAAjBG,KAAMb,EAAWU,EAAXV,OAE3B,OACE,kBAAC,IAAD,CAAQc,YAAad,EAAOe,MAAQf,EAAOe,WAAQC,GACjD,kBAAC,IAAD,CAAQC,MAAOL,EAAYK,QAE3B,yBAAKC,UAAU,UACb,4BAAKN,EAAYK,OACjB,yBAAKC,UAAU,eACb,yBAAKC,MAAO,CAAEC,MAAO,SAClBR,EAAYS,QACX,yBAAKH,UAAU,qBACb,kBAAC,IAAD,MACA,uBACEA,UAAU,OACVI,OAAO,SACPC,KAAMX,EAAYS,OAClBG,IAAI,uBAJN,oBAMoBZ,EAAYS,SAInCT,EAAYa,QACX,yBAAKP,UAAU,qBACb,kBAAC,IAAD,MACA,0BAAMA,UAAU,QAAQN,EAAYa,SAGvCzB,EAAO0B,gBACN,yBAAKR,UAAU,qBACb,kBAAC,IAAD,MACA,0BAAMA,UAAU,QACblB,EAAO0B,eACLC,KAAI,SAACC,GAAD,OACH,kBAAC,OAAD,CAAMC,IAAKD,EAAEE,KAAMC,GAAIH,EAAEE,MACtBF,EAAEX,UAGNe,QAAO,SAACC,EAAMC,GAAP,MAAgB,CAACD,EAAM,KAAMC,SAM/C,yBAAKf,MAAO,CAAEC,MAAO,UAClBR,EAAYuB,MACX,6BACGvB,EAAYuB,KAAKC,MAAM,KAAKT,KAAI,SAACU,GAAD,OAC/B,0BAAMnB,UAAU,OAAOmB,SAMjC,kBAACC,EAAD,CAAQC,KAAM1B,EAAM2B,YAAaxC,EAAOwC,kBAoEZzC,GAEpC,IAAMuC,EAAS,SAAC,GAA8C,IAA5CC,EAA2C,EAA3CA,KACVE,GADqD,EAArCD,YACND,EAAKH,MAAM,SAE3B,OACE,yBAAKlB,UAAU,kBACZuB,EAAQd,KAAI,SAACC,GAAD,OACX,yBAAKV,UAAU,eAAewB,wBAAyB,CAAEC,OAAQf","file":"component---src-templates-small-recipes-template-js-1ab5d672a102576f51c3.js","sourcesContent":["import React from 'react'\nimport { graphql, Link } from 'gatsby'\nimport { Helmet } from 'react-helmet'\nimport { remarkForm } from 'gatsby-tinacms-remark'\nimport { BsFillPeopleFill, BsLink45Deg, BsLink } from 'react-icons/bs'\nimport Layout from '../components/layout'\n\nfunction Template({ data }) {\n  const { markdownRemark } = data\n  const { frontmatter, html, fields } = markdownRemark\n\n  return (\n    <Layout headerImage={fields.image ? fields.image : undefined}>\n      <Helmet title={frontmatter.title} />\n\n      <div className=\"recipe\">\n        <h1>{frontmatter.title}</h1>\n        <div className=\"recipe-meta\">\n          <div style={{ float: 'left' }}>\n            {frontmatter.source && (\n              <div className=\"section-with-icon\">\n                <BsLink45Deg />\n                <a\n                  className=\"text\"\n                  target=\"_blank\"\n                  href={frontmatter.source}\n                  rel=\"noopener noreferrer\"\n                >\n                  original recipe: {frontmatter.source}\n                </a>\n              </div>\n            )}\n            {frontmatter.serves && (\n              <div className=\"section-with-icon\">\n                <BsFillPeopleFill />\n                <span className=\"text\">{frontmatter.serves}</span>\n              </div>\n            )}\n            {fields.relatedRecipes && (\n              <div className=\"section-with-icon\">\n                <BsLink />\n                <span className=\"text\">\n                  {fields.relatedRecipes\n                    .map((r) => (\n                      <Link key={r.slug} to={r.slug}>\n                        {r.title}\n                      </Link>\n                    ))\n                    .reduce((prev, curr) => [prev, ', ', curr])}\n                </span>\n              </div>\n            )}\n          </div>\n\n          <div style={{ float: 'right' }}>\n            {frontmatter.tags && (\n              <div>\n                {frontmatter.tags.split(' ').map((tag) => (\n                  <span className=\"tag\">{tag}</span>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n        <Recipe text={html} ingredients={fields.ingredients} />\n      </div>\n    </Layout>\n  )\n}\n\nexport const recipeForm = {\n  fields: [\n    {\n      label: 'Name',\n      name: 'frontmatter.title',\n      description:\n        'Something short but descriptive enougg, e.g. \"Chicken Curry\", \"Sweet and Sour Chicken\"',\n      component: 'text',\n      required: true,\n    },\n    {\n      label: 'Date',\n      name: 'rawFrontmatter.date',\n      component: 'date',\n      dateFormat: 'YYYY-MM-DD',\n      timeFormat: false,\n      description: 'Date when the recipe was created, YYYY-MM-DD',\n    },\n    {\n      name: 'frontmatter.lang',\n      component: 'select',\n      label: 'Language',\n      description: 'Language of the recipe',\n      options: ['en', 'cz', 'se'],\n    },\n    {\n      label: 'Serves',\n      name: 'frontmatter.serves',\n      component: 'text',\n    },\n    {\n      label: 'Related recipes',\n      name: 'frontmatter.related',\n      description: 'Space-separated list of filenames of related recipes',\n      component: 'text',\n    },\n    {\n      label: 'Source',\n      name: 'frontmatter.source',\n      component: 'text',\n      description: 'URL of the original video/article',\n    },\n    {\n      label: 'Tags',\n      name: 'frontmatter.tags',\n      component: 'text',\n      description: 'Space-separated list of tags',\n    },\n    {\n      label: 'Ingredients',\n      name: 'rawFrontmatter.ingredients',\n      component: 'markdown',\n    },\n    {\n      label: 'Text',\n      name: 'rawMarkdownBody',\n      component: 'markdown',\n      required: true,\n    },\n  ],\n}\n\nexport default remarkForm(Template, recipeForm)\n\nconst Recipe = ({ text, ingredients: sourceIngredients }) => {\n  const recipes = text.split('<hr>')\n\n  return (\n    <div className=\"recipe-content\">\n      {recipes.map((r) => (\n        <div className=\"small-recipe\" dangerouslySetInnerHTML={{ __html: r }} />\n      ))}\n    </div>\n  )\n}\n\nexport const pageQuery = graphql`\n  query SmallRecipesQuery($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      frontmatter {\n        title\n        serves\n        source\n        tags\n      }\n      fields {\n        ingredients\n        relatedRecipes {\n          slug\n          title\n        }\n        image {\n          childImageSharp {\n            gatsbyImageData(layout: CONSTRAINED)\n          }\n        }\n      }\n      ...TinaRemark\n    }\n  }\n`\n"],"sourceRoot":""}